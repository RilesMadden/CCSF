xn Great job! I appreciated the structure and it was easy to follow. You can take it one step further by introducing introducing .strip(".,!?():;") somewhere to remove punctuation to ensure things like 'word' and 'word.' are counted differently.
gh Nice job! I appreciated all of the error handling and simplicity of the word counting. There are still punctuation marks in the text, however, as the .strip() method just removes white spaces which was already done when you split by space. You can change this to strip(".,!?():;") and it should work well. 
sk Nice job! Code executes without error. I appreciated all of the unique error handling, as well. You could produce a slightly more accurate result by making sure all words are lower case, because the set will treat 'Word' and 'word' differently. You can make this change by changing unqiue_words to unique_words = len(set([word.lower() for word in all_words]))
uk Nice job! Code executes without error. You could produce a slightly more accurate result by making sure all words are lower case. You can do this by changing 'if word not in distinctWords' to 'if word.lower() not in distinctWords'. This way it will count 'word' and 'Word' as the same ... word. Otherwise, well done!
rv Nice job, the code executes without error and was easy to read. The word count contains duplicate words, if the assignment is to count unique/distinct words. This can be fixed by introducing a set during your word count, such as len(set(text.split())). This will ensure all words counted are distinct.
my Nice effort! I'm able to follow your code, however it's not producing the expected result. After your try/except path, you should add a 'with open(filepath) as fname:' and then proceed with your code, otherwise you may not be able to use the functions to read the file. You also need a way to split up the text line by line, as it isn't defined, something like split("\n") is needed.
s3 Nice effort, I was able to follow your code and appreciated the error handling. The code executed however did not procude the expected result, as the word count contains duplicate words as opposed to distinct/unique words. You can accomplish this by introducing a set to make sure words are not double counted.